import numpy as np
import matplotlib.pyplot as plt

def minusexp(x):
    x = np.float32(x)
    return np.exp(-x).astype(np.float32)

def Int_middle(f,a,b,N):
    a,b = np.float32(a),np.float32(b); N = int(N)
    h = (b-a)/np.float32(N)
    k = np.arange(N, dtype=np.float32)
    mids = a + (k + np.float32(0.5)) * h
    I = h * np.sum(f(mids), dtype=np.float32)
    return I

def Int_trapezoid(f,a,b,N):
    a,b = np.float32(a),np.float32(b); N = int(N)
    h = (b-a)/np.float32(N)
    xs = a + h*np.arange(N+1, dtype=np.float32)
    fx = f(xs)
    S = (np.float32(0.5)*fx[0]
         + np.sum(fx[1:-1], dtype=np.float32)
         + np.float32(0.5)*fx[-1])
    return (h*S).astype(np.float32)

def Int_simpson(f,a,b,N):
    a,b = np.float32(a),np.float32(b); N = int(N)
    if N % 2 == 1:  
        N += 1
    h = (b-a)/np.float32(N)
    xs = a + h*np.arange(N+1, dtype=np.float32)
    fx = f(xs)
    S = (fx[0] + fx[-1]
         + np.float32(4)*np.sum(fx[1:-1:2], dtype=np.float32)
         + np.float32(2)*np.sum(fx[2:-1:2], dtype=np.float32))
    return (h*(np.float32(1)/np.float32(3))*S).astype(np.float32)


Ns = np.unique((np.logspace(1, 7, 40)).astype(int)) 

trueval = 1.0 - np.exp(-1.0)

def rel_err(app, real):
    return abs((float(app) - float(real)) / float(real))

err_middle   = [rel_err(Int_middle(minusexp, 0, 1, N), trueval)   for N in Ns]
err_trapezoid= [rel_err(Int_trapezoid(minusexp,0, 1, N), trueval) for N in Ns]
err_simpson  = [rel_err(Int_simpson(minusexp, 0, 1, N), trueval)  for N in Ns]

plt.figure(figsize=(6,4))
plt.loglog(Ns, err_middle,    label="midpoint")
plt.loglog(Ns, err_trapezoid, label="trapezoid")
plt.loglog(Ns, err_simpson,   label="Simpson")
plt.xlabel("N"); plt.ylabel("relative error"); plt.title("Error vs N (float32)")
plt.grid(True, which="major", ls="--", alpha=0.5)
plt.legend(); plt.tight_layout(); plt.show()
